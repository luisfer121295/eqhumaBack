import { Public } from "src/auth/auth.decorator";
import { NuiteeService } from "./nuitee.service";

import { Controller, Get, Query, Post, Body } from "@nestjs/common";
import { proces3type } from "./nuitee_types";

@Controller("codes")
export class NuiteeController {
  constructor(private CodesListService: NuiteeService) {}

  @Get("/valid")
  @Public()
  public async validcode(@Query("code") code): Promise<any[]> {
    console.log(code);
    if (code != undefined) {
      console.log(code);
      const result = await this.CodesListService.CodeInfo(code);
      return result;
    }
  }

  @Get("/redeemcode")
  @Public()
  public async updatecode(
    @Query("idcode") idcode,
    @Query("idusuario") idusuario
  ): Promise<any[]> {
    console.log(idcode);
    if (idcode != undefined) {
      console.log(idcode);
      const result = await this.CodesListService.CodeUpdate(idcode, idusuario);
      return result;
    }
  }

  @Get("/infonuitee")
  @Public()
  public async datanuitee(@Query("code") data): Promise<any> {
    console.log(data);
    // if(data != undefined){
    console.log(data);
    const result = await this.CodesListService.readData(data);
    return result;
    // }
  }

  // ///////////////////////////////////////////   controlador original
  //    @Get('/readnuitee')
  //    @Public()
  //    public async readnuitee(
  //      @Query('code') data
  //    ): Promise<any> {

  //         const result = await this.CodesListService.readDataNew(data);
  //         console.log('numero de sub array´s para insertar en arrayData <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')
  //         console.log(result.arrayData.length);

  //         const createRegists = await this.CodesListService.saveDataToDatabase(result);
  //         console.log('se devuelve valor despues de insertar en tablas <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')
  //         console.log(createRegists.totalItemsProcessed)

  // console.log('ultimo valor leido ');
  // console.log(result.totalLines);

  //         return result;
  //    }

  @Get("/readnuitee")
  @Public()
  public async readnuitee(@Query("code") data): Promise<any> {
    // Almacena el contexto actual para usarlo dentro de la función recursiva
    const originalContext = this;

    async function recursiveRead(dataValue: number): Promise<any> {
      // Utiliza el contexto almacenado
      const result =
        await originalContext.CodesListService.readDataNew(dataValue);
      console.log(
        "numero de sub array´s para insertar en arrayData <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
      );
      console.log(result.arrayData.length);

      const createRegists =
        await originalContext.CodesListService.saveDataToDatabase3(result);

      console.log(
        "se devuelve valor después de insertar en tablas <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
      );
      console.log(createRegists.totalItemsProcessed);

      // console.log('último valor leído ');
      // console.log(result.totalLines);

      console.log("datos para el if");
      console.log(dataValue);
      console.log(result.totalLines);
      console.log("respuesta del el if");
      console.log(result.totalLines < dataValue);

      // Verificar si debemos realizar otra llamada recursiva

      if (result.totalLines > dataValue) {
        if (result.totalLines == 6) {
          return result;
          // Llamar recursivamente con el próximo valor
        } else {
          return recursiveRead(result.totalLines);
        }
      } else {
        // Si ya no hay más llamadas recursivas, retornar el resultado final
        return result;
      }
    }

    // Iniciar la llamada recursiva con el valor inicial
    return recursiveRead(data);
  }

  @Get("/divfile")
  @Public()
  public async divfile(@Query("code") data): Promise<any> {
    const result = await this.CodesListService.splitAndCreateFiles();
    console.log(
      "numero de sub array´s para insertar en arrayData <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    );
    console.log(result);

    return result;
  }

  /// valida ids en base

  @Get("/validIDnuitee")
  @Public()
  public async valididnuitee(@Query("code") data): Promise<any> {
    const result = await this.CodesListService.validIDData(data);
    console.log(
      "numero de sub array´s para insertar en arrayData <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    );
    console.log(result);

    return result;
  }

  ///////////////// paso 3 search en nuitee e inserto en tabla mach

  @Get("/Searchnuitee")
  @Public()
  public async SearchHotelNitee(
    @Body()
    request: {
      tipesearch: number;
      textsearch: string;
      quantity: number;
    },
    @Query()
    query: {
      counter?: number;
    }
  ): Promise<any> {
    const idNuitee = 10001;
    const idTampa = [
      "553248621562854428",
      "553248635976007279",
      "624547928657342464",
      "624553852942888960",
      "624557800832610304",
      "624557811319386112",
      "553248635976468598",
      "553248635976469172",
      "553248635976470802",
      "553248635976470960",
      "553248634932822681",
      "6321415",
      "6321429",
      "6321471",
      "553248635976473701",
      "3517",
      "553248635976473961",
      "553248635976658796",
      "6321366",
      "553248635976475202",
      "553248635976475460",
      "553248635976476295",
      "553248635975857144",
      "553248621563219682",
      "553248635975868899",
      "3000007908",
      "553248635975874728",
      "553248635975872827",
      "553248635975873192",
      "624551238475919360",
      "624551512293748736",
      "624547014282293248",
      "553248635976007418",
      "624549790835609600",
      "553248635976133454",
      "624556563290198016",
      "624556565398269952",
      "553248635976468758",
      "553248635976469867",
      "553248635976469491",
      "553248635976469402",
      "553248635976481520",
      "553248635976470601",
      "503014",
      "503019",
      "503036",
      "503033",
      "503050",
      "503056",
      "503040",
      "503053",
      "503034",
      "553248635976481723",
      "553248635976472743",
      "553248635976472855",
      "553248635976472747",
      "553248635976472828",
      "553248635976472883",
      "553248635976472959",
      "553248635976473039",
      "553248635976482193",
      "6321469",
      "6321482",
      "506597",
      "6321060",
      "506596",
      "6321058",
      "6321364",
      "6321369",
      "6321388",
      "6321465",
      "553248635976474781",
      "553248635976475004",
      "553248635976658716",
      "553248635976475114",
      "553248635976659208",
      "553248635976475125",
      "553248635976475143",
      "6319740",
      "6321372",
      "6321361",
      "6321386",
      "6321418",
      "6321322",
      "6321556",
      "6321567",
      "6321572",
      "6321578",
      "553248635976476566",
      "553248635976476950",
      "553248635976478805",
      "553248635976479065",
      "553248635976479143",
      "553248635976479571",
      "553248635976480142",
      "641530095395164160",
      "6048134",
      "6048135",
      "553248635975846950",
      "553248621533115727",
      "553248621533115730",
      "553248621558032972",
      "553248621561884892",
      "553248621561885001",
      "553248621561885003",
      "6128349",
      "6128353",
      "6128343",
      "6128351",
      "6128333",
      "6128345",
      "6128536",
      "624550061468880896",
      "624547568002740224",
      "624553514878873600",
      "624553857139290112",
      "624553850842189824",
      "624556663958122496",
      "553248635976265001",
      "553248633935278471",
      "3000430925",
      "553248633999401502",
      "553248635976388681",
      "553248635976388768",
      "553248635976469660",
      "553248635976470148",
      "503035",
      "503055",
      "553248635976471395",
      "553248635976471493",
      "503025",
      "553248635976471615",
      "553248635976471782",
      "553248635976471810",
      "553248635976472183",
      "553248635976472092",
      "553248635976472287",
      "553248635976472350",
      "553248635976472382",
      "553248635976472407",
      "553248635976472532",
      "553248635976472802",
      "553248635976473188",
      "6321425",
      "553248635976474042",
      "553248635976475122",
      "553248635976475817",
      "553248635976475859",
      "553248635976478155",
      "553248635976478446",
      "553248635976479047",
      "553248635976480081",
      "6340415",
      "655710634983645184",
      "7259",
      "553248635975478015",
      "6065211",
      "6159686",
      "553248621533125311",
      "6178150",
      "6195119",
      "553248621561884887",
      "553248621561885004",
      "553248621561884881",
      "553248621561884880",
      "553248621561885014",
      "6128534",
      "6139257",
      "6321582",
      "6321570",
      "6321574",
      "553248635976477000",
      "553248635976477130",
      "553248635976477042",
      "553248635976477416",
      "553248635976477430",
      "553248635976477769",
      "553248635976480636",
      "6341363",
      "6341894",
      "6341890",
      "553248635074842386",
      "553248635077748315",
      "553248635979819845",
      "553248635983988496",
      "6352581",
      "660058225172221952",
      "553248621532654451",
      "6065207",
      "6065221",
      "6065215",
      "6065219",
      "6065217",
      "6065213",
      "6065223",
      "553248635975849138",
      "6178139",
      "6178198",
      "6178165",
      "89737",
      "553248621558032975",
      "553248621561884905",
      "553248621561884999",
      "553248621561885016",
      "6128362",
      "6127877",
      "6127884",
      "6138722",
      "6138726",
    ];
    const idmiami = [
      "173098",
      "553248621563219807",
      "553248621563220096",
      "6238891",
      "6238965",
      "553248635975875430",
      "6239934",
      "6239950",
      "6239955",
      "6240006",
      "6240011",
      "6242759",
      "6240961",
      "553248635976007335",
      "624548599653273600",
      "624555571488296960",
      "553248635976197167",
      "553248635976195090",
      "553248635976385476",
      "3000431927",
      "553248635976386181",
      "553248635976469761",
      "6295985",
      "553248635976471068",
      "553248635976473544",
      "553248635976473237",
      "507414",
      "507415",
      "553248635976474572",
      "553248635976475968",
      "553248635976476815",
      "553248634998631801",
      "553248634999122154",
      "553248635023399394",
      "553248635023516399",
      "553248635023517398",
      "553248635023395863",
      "553248635023516128",
      "553248635023516723",
      "553248635171379702",
      "553248635997986513",
      "553248635997987072",
      "693562570943598592",
      "693562607284912128",
      "658956879499268096",
      "11937",
      "553248635975857988",
      "553248621563220098",
      "553248621563220099",
      "553248635975868380",
      "553248635975867839",
      "3000007940",
      "553248635975872136",
      "553248635975873914",
      "553248635975874060",
      "6238880",
      "6238099",
      "6239337",
      "553248635975873124",
      "6240021",
      "553248635975876129",
      "624550537409138688",
      "624550535986622464",
      "624546815079034880",
      "624553112707600384",
      "624546823451947008",
      "553248622677909304",
      "624558004255920128",
      "3000345147",
      "3000431354",
      "553248635976383713",
      "6277865",
      "6277870",
      "6277867",
      "553248635976468847",
      "553248635976469340",
      "553248635976471272",
      "553248635976481778",
      "6300734",
      "553248635976473014",
      "553248635976473072",
      "553248635976473155",
      "553248635976473822",
      "553248635976474282",
      "553248635976659121",
      "501785",
      "501777",
      "553248635976479344",
      "553248635976480058",
      "553248634998884165",
      "553248634999037724",
      "553248635023517295",
      "553248635023515829",
      "553248635023517355",
      "553248635023517374",
      "682878668058124288",
      "682879304716595200",
      "553248635997986456",
      "553248635997986835",
      "553248635997987125",
      "553248635997987237",
      "6034958",
      "658954022861037568",
      "658954410563624960",
      "658954646223228928",
      "658954961668444160",
      "658954695072190464",
      "658954846283141120",
      "658954684294389760",
      "658955104620273664",
      "658954405216423936",
      "553248621532652862",
      "553248621532652906",
      "553248621532653021",
      "553248621532653035",
      "553248621532652877",
      "553248621532652890",
      "553248621532653036",
      "553248621532652852",
      "553248621532652863",
      "553248621532652856",
      "553248621532652865",
      "553248621532652879",
      "553248621532653020",
      "553248635974494024",
      "6063615",
      "6063627",
      "6063619",
      "6063625",
      "6063607",
      "6063617",
      "6063593",
      "6069319",
      "6158894",
      "6158892",
      "553248635975846833",
      "553248635975848412",
      "553248635975848925",
      "553248635975849123",
      "803763595479941120",
      "803555010637246464",
      "803558107462049792",
      "803553801383997440",
      "6211405",
      "6211418",
      "6211463",
      "6211494",
      "6211518",
      "6211400",
      "6211484",
      "6211499",
      "6211453",
      "6211490",
      "553248621533115989",
      "553248621563220097",
      "2297",
      "553248635975867625",
      "6238814",
      "6238839",
      "6238989",
      "6238918",
      "6238960",
      "6239049",
      "6238976",
      "6239353",
      "6239310",
      "6239320",
      "6239304",
      "6239300",
      "6239306",
      "6239941",
      "6239953",
      "6239891",
      "6239899",
      "6239905",
      "6239969",
      "553248635975875952",
      "553248635975876385",
      "6240970",
      "624554968148152320",
      "624548145099124736",
      "624557666616545280",
      "3000431486",
      "553248634014921050",
      "553248635976469594",
      "6298640",
      "553248635976472243",
      "505226",
      "553248635976478806",
      "553248635976480059",
      "553248635977254170",
      "553248634998815748",
      "553248635023516382",
      "691734328227586048",
      "553248635997986725",
      "553248635997986876",
      "553248635997986853",
      "553248635997987010",
      "553248635997987039",
      "6004363",
      "658956860947660800",
      "658956772336361472",
      "658955792276750336",
      "553248621532652876",
      "553248621532653044",
      "553248621532652845",
      "553248621532652855",
      "553248621532652899",
      "553248621532653038",
      "553248621532652860",
      "6048102",
      "6063599",
      "6063611",
      "6063621",
      "6203421",
      "6157965",
      "553248635975848802",
      "6162853",
      "553248621533116046",
      "553248621533115995",
      "553248621533115991",
      "553248621533115998",
      "553248621533116045",
      "553248621533116042",
      "553248621533115992",
      "553248621533116043",
      "553248621533115993",
      "553248621533116000",
      "553248621533116037",
      "6211416",
      "6211426",
      "6211437",
      "6211455",
      "6211482",
      "818567455009927168",
      "6184964",
      "6191369",
      "6196860",
      "553248621533115990",
      "553248621533115996",
      "553248621533115755",
      "553248621533116038",
      "6211422",
      "6211466",
      "6211486",
      "6211520",
      "6211396",
      "6211440",
      "6211479",
      "6211512",
      "6211447",
      "6211444",
      "6211457",
      "6211505",
      "553248621533115864",
      "553248621533116041",
      "553248621533116047",
      "6211604",
      "6211614",
      "6187838",
      "6190866",
      "6190915",
      "6190967",
      "6190901",
      "6190897",
      "6190972",
      "6191016",
      "6190890",
      "6190921",
      "6190984",
      "553248621561884635",
      "553248621561885781",
      "553248621561884713",
      "553248621561885785",
      "6127764",
      "6128538",
      "6144791",
      "6144789",
      "658954760750796800",
      "658954400113852416",
      "658954660734984192",
      "658955115102175232",
      "658955123020685312",
      "658956577832341504",
      "658956979015221248",
      "658957114702716928",
      "658957332318224384",
      "670563566930513920",
      "672772192335429632",
      "553248621532652889",
      "553248621532653045",
      "553248635974614515",
      "553248635974901173",
      "800070",
      "6063631",
      "6063591",
      "6063609",
      "6063613",
      "6065855",
      "6065859",
      "6065853",
      "6069321",
      "553248635975846746",
      "553248635975847513",
      "553248635975848066",
      "6163017",
      "6170608",
      "553248621533115750",
      "553248621533115987",
      "6211434",
      "6211461",
      "6211503",
      "6211488",
      "6211497",
      "6211507",
      "6211516",
      "6211509",
      "8226",
      "9173",
      "6190977",
      "6191002",
      "6191357",
      "6192922",
      "553248621558115297",
      "553248621560926672",
      "553248621561884594",
      "553248621561885792",
      "553248621561884658",
      "553248621561885793",
      "6127762",
      "6144787",
    ];

    //  const readids = await this.CodesListService.readnuitee(idNuitee);

    for (const itemsidnuitee of idmiami) {
      const readids =
        await this.CodesListService.readnuiteePropertyIdsExp(itemsidnuitee);

      console.log("readids");
      console.log(readids);

      // for(const itemids of readids){

      //   const result = await this.CodesListService.setNuiteeSearch(itemids.property_ids_expanded);
      //   console.log('result');
      //   console.log(result);
      //   return result;
      // }
      return readids;
    }

    //  const result = await this.CodesListService.setNuiteeSearch(data);

    console.log("respuesta en Controlador de busqueda ");
  }

  @Get("/SearchMarkcorps")
  @Public()
  public async SearchHotelMarkcorps(@Query("data") data): Promise<any> {
    const idNuitee = 10001;
    const idTampa = [
      "553248621562854428",
      "553248635976007279",
      "624547928657342464",
      "624553852942888960",
      "624557800832610304",
      "624557811319386112",
      "553248635976468598",
      "553248635976469172",
      "553248635976470802",
      "553248635976470960",
      "553248634932822681",
      "6321415",
      "6321429",
      "6321471",
      "553248635976473701",
      "3517",
      "553248635976473961",
      "553248635976658796",
      "6321366",
      "553248635976475202",
      "553248635976475460",
      "553248635976476295",
      "553248635975857144",
      "553248621563219682",
      "553248635975868899",
      "3000007908",
      "553248635975874728",
      "553248635975872827",
      "553248635975873192",
      "624551238475919360",
      "624551512293748736",
      "624547014282293248",
      "553248635976007418",
      "624549790835609600",
      "553248635976133454",
      "624556563290198016",
      "624556565398269952",
      "553248635976468758",
      "553248635976469867",
      "553248635976469491",
      "553248635976469402",
      "553248635976481520",
      "553248635976470601",
      "503014",
      "503019",
      "503036",
      "503033",
      "503050",
      "503056",
      "503040",
      "503053",
      "503034",
      "553248635976481723",
      "553248635976472743",
      "553248635976472855",
      "553248635976472747",
      "553248635976472828",
      "553248635976472883",
      "553248635976472959",
      "553248635976473039",
      "553248635976482193",
      "6321469",
      "6321482",
      "506597",
      "6321060",
      "506596",
      "6321058",
      "6321364",
      "6321369",
      "6321388",
      "6321465",
      "553248635976474781",
      "553248635976475004",
      "553248635976658716",
      "553248635976475114",
      "553248635976659208",
      "553248635976475125",
      "553248635976475143",
      "6319740",
      "6321372",
      "6321361",
      "6321386",
      "6321418",
      "6321322",
      "6321556",
      "6321567",
      "6321572",
      "6321578",
      "553248635976476566",
      "553248635976476950",
      "553248635976478805",
      "553248635976479065",
      "553248635976479143",
      "553248635976479571",
      "553248635976480142",
      "641530095395164160",
      "6048134",
      "6048135",
      "553248635975846950",
      "553248621533115727",
      "553248621533115730",
      "553248621558032972",
      "553248621561884892",
      "553248621561885001",
      "553248621561885003",
      "6128349",
      "6128353",
      "6128343",
      "6128351",
      "6128333",
      "6128345",
      "6128536",
      "624550061468880896",
      "624547568002740224",
      "624553514878873600",
      "624553857139290112",
      "624553850842189824",
      "624556663958122496",
      "553248635976265001",
      "553248633935278471",
      "3000430925",
      "553248633999401502",
      "553248635976388681",
      "553248635976388768",
      "553248635976469660",
      "553248635976470148",
      "503035",
      "503055",
      "553248635976471395",
      "553248635976471493",
      "503025",
      "553248635976471615",
      "553248635976471782",
      "553248635976471810",
      "553248635976472183",
      "553248635976472092",
      "553248635976472287",
      "553248635976472350",
      "553248635976472382",
      "553248635976472407",
      "553248635976472532",
      "553248635976472802",
      "553248635976473188",
      "6321425",
      "553248635976474042",
      "553248635976475122",
      "553248635976475817",
      "553248635976475859",
      "553248635976478155",
      "553248635976478446",
      "553248635976479047",
      "553248635976480081",
      "6340415",
      "655710634983645184",
      "7259",
      "553248635975478015",
      "6065211",
      "6159686",
      "553248621533125311",
      "6178150",
      "6195119",
      "553248621561884887",
      "553248621561885004",
      "553248621561884881",
      "553248621561884880",
      "553248621561885014",
      "6128534",
      "6139257",
      "6321582",
      "6321570",
      "6321574",
      "553248635976477000",
      "553248635976477130",
      "553248635976477042",
      "553248635976477416",
      "553248635976477430",
      "553248635976477769",
      "553248635976480636",
      "6341363",
      "6341894",
      "6341890",
      "553248635074842386",
      "553248635077748315",
      "553248635979819845",
      "553248635983988496",
      "6352581",
      "660058225172221952",
      "553248621532654451",
      "6065207",
      "6065221",
      "6065215",
      "6065219",
      "6065217",
      "6065213",
      "6065223",
      "553248635975849138",
      "6178139",
      "6178198",
      "6178165",
      "89737",
      "553248621558032975",
      "553248621561884905",
      "553248621561884999",
      "553248621561885016",
      "6128362",
      "6127877",
      "6127884",
      "6138722",
      "6138726",
    ];

    const idmiami = [
      "173098",
      "553248621563219807",
      "553248621563220096",
      "6238891",
      "6238965",
      "553248635975875430",
      "6239934",
      "6239950",
      "6239955",
      "6240006",
      "6240011",
      "6242759",
      "6240961",
      "553248635976007335",
      "624548599653273600",
      "624555571488296960",
      "553248635976197167",
      "553248635976195090",
      "553248635976385476",
      "3000431927",
      "553248635976386181",
      "553248635976469761",
      "6295985",
      "553248635976471068",
      "553248635976473544",
      "553248635976473237",
      "507414",
      "507415",
      "553248635976474572",
      "553248635976475968",
      "553248635976476815",
      "553248634998631801",
      "553248634999122154",
      "553248635023399394",
      "553248635023516399",
      "553248635023517398",
      "553248635023395863",
      "553248635023516128",
      "553248635023516723",
      "553248635171379702",
      "553248635997986513",
      "553248635997987072",
      "693562570943598592",
      "693562607284912128",
      "658956879499268096",
      "11937",
      "553248635975857988",
      "553248621563220098",
      "553248621563220099",
      "553248635975868380",
      "553248635975867839",
      "3000007940",
      "553248635975872136",
      "553248635975873914",
      "553248635975874060",
      "6238880",
      "6238099",
      "6239337",
      "553248635975873124",
      "6240021",
      "553248635975876129",
      "624550537409138688",
      "624550535986622464",
      "624546815079034880",
      "624553112707600384",
      "624546823451947008",
      "553248622677909304",
      "624558004255920128",
      "3000345147",
      "3000431354",
      "553248635976383713",
      "6277865",
      "6277870",
      "6277867",
      "553248635976468847",
      "553248635976469340",
      "553248635976471272",
      "553248635976481778",
      "6300734",
      "553248635976473014",
      "553248635976473072",
      "553248635976473155",
      "553248635976473822",
      "553248635976474282",
      "553248635976659121",
      "501785",
      "501777",
      "553248635976479344",
      "553248635976480058",
      "553248634998884165",
      "553248634999037724",
      "553248635023517295",
      "553248635023515829",
      "553248635023517355",
      "553248635023517374",
      "682878668058124288",
      "682879304716595200",
      "553248635997986456",
      "553248635997986835",
      "553248635997987125",
      "553248635997987237",
      "6034958",
      "658954022861037568",
      "658954410563624960",
      "658954646223228928",
      "658954961668444160",
      "658954695072190464",
      "658954846283141120",
      "658954684294389760",
      "658955104620273664",
      "658954405216423936",
      "553248621532652862",
      "553248621532652906",
      "553248621532653021",
      "553248621532653035",
      "553248621532652877",
      "553248621532652890",
      "553248621532653036",
      "553248621532652852",
      "553248621532652863",
      "553248621532652856",
      "553248621532652865",
      "553248621532652879",
      "553248621532653020",
      "553248635974494024",
      "6063615",
      "6063627",
      "6063619",
      "6063625",
      "6063607",
      "6063617",
      "6063593",
      "6069319",
      "6158894",
      "6158892",
      "553248635975846833",
      "553248635975848412",
      "553248635975848925",
      "553248635975849123",
      "803763595479941120",
      "803555010637246464",
      "803558107462049792",
      "803553801383997440",
      "6211405",
      "6211418",
      "6211463",
      "6211494",
      "6211518",
      "6211400",
      "6211484",
      "6211499",
      "6211453",
      "6211490",
      "553248621533115989",
      "553248621563220097",
      "2297",
      "553248635975867625",
      "6238814",
      "6238839",
      "6238989",
      "6238918",
      "6238960",
      "6239049",
      "6238976",
      "6239353",
      "6239310",
      "6239320",
      "6239304",
      "6239300",
      "6239306",
      "6239941",
      "6239953",
      "6239891",
      "6239899",
      "6239905",
      "6239969",
      "553248635975875952",
      "553248635975876385",
      "6240970",
      "624554968148152320",
      "624548145099124736",
      "624557666616545280",
      "3000431486",
      "553248634014921050",
      "553248635976469594",
      "6298640",
      "553248635976472243",
      "505226",
      "553248635976478806",
      "553248635976480059",
      "553248635977254170",
      "553248634998815748",
      "553248635023516382",
      "691734328227586048",
      "553248635997986725",
      "553248635997986876",
      "553248635997986853",
      "553248635997987010",
      "553248635997987039",
      "6004363",
      "658956860947660800",
      "658956772336361472",
      "658955792276750336",
      "553248621532652876",
      "553248621532653044",
      "553248621532652845",
      "553248621532652855",
      "553248621532652899",
      "553248621532653038",
      "553248621532652860",
      "6048102",
      "6063599",
      "6063611",
      "6063621",
      "6203421",
      "6157965",
      "553248635975848802",
      "6162853",
      "553248621533116046",
      "553248621533115995",
      "553248621533115991",
      "553248621533115998",
      "553248621533116045",
      "553248621533116042",
      "553248621533115992",
      "553248621533116043",
      "553248621533115993",
      "553248621533116000",
      "553248621533116037",
      "6211416",
      "6211426",
      "6211437",
      "6211455",
      "6211482",
      "818567455009927168",
      "6184964",
      "6191369",
      "6196860",
      "553248621533115990",
      "553248621533115996",
      "553248621533115755",
      "553248621533116038",
      "6211422",
      "6211466",
      "6211486",
      "6211520",
      "6211396",
      "6211440",
      "6211479",
      "6211512",
      "6211447",
      "6211444",
      "6211457",
      "6211505",
      "553248621533115864",
      "553248621533116041",
      "553248621533116047",
      "6211604",
      "6211614",
      "6187838",
      "6190866",
      "6190915",
      "6190967",
      "6190901",
      "6190897",
      "6190972",
      "6191016",
      "6190890",
      "6190921",
      "6190984",
      "553248621561884635",
      "553248621561885781",
      "553248621561884713",
      "553248621561885785",
      "6127764",
      "6128538",
      "6144791",
      "6144789",
      "658954760750796800",
      "658954400113852416",
      "658954660734984192",
      "658955115102175232",
      "658955123020685312",
      "658956577832341504",
      "658956979015221248",
      "658957114702716928",
      "658957332318224384",
      "670563566930513920",
      "672772192335429632",
      "553248621532652889",
      "553248621532653045",
      "553248635974614515",
      "553248635974901173",
      "800070",
      "6063631",
      "6063591",
      "6063609",
      "6063613",
      "6065855",
      "6065859",
      "6065853",
      "6069321",
      "553248635975846746",
      "553248635975847513",
      "553248635975848066",
      "6163017",
      "6170608",
      "553248621533115750",
      "553248621533115987",
      "6211434",
      "6211461",
      "6211503",
      "6211488",
      "6211497",
      "6211507",
      "6211516",
      "6211509",
      "8226",
      "9173",
      "6190977",
      "6191002",
      "6191357",
      "6192922",
      "553248621558115297",
      "553248621560926672",
      "553248621561884594",
      "553248621561885792",
      "553248621561884658",
      "553248621561885793",
      "6127762",
      "6144787",
    ];
    // console.log(idmiami.length);
    const readids = await this.CodesListService.selectinfmach(data);

    for (const itemsidnuitee of idmiami){
      const readids = await this.CodesListService.readnuiteePropertyIdsExp(itemsidnuitee);
      console.log('readids');
      console.log(readids);
    }

    console.log("respuesta en Controlador de busqueda ");
    console.log(readids);
  }

  /////////////////////// procesado de hoteles, inserta en tablas search_pr, rooms, imagenes

  @Post("/mapinghotelNuitee")
  @Public()
  public async SearchHotels(
    @Body()
    request: {
      amount: number;
    },
    @Query()
    query: {
      counter?: number;
    }
  ): Promise<any> {
    const { amount } = request;
    const counter = query?.counter || 1; // Se obtiene el contador o se establece en 0 si no está presente

    console.log(
      "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ENTRO EN RECURSIVIDAD. >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
      counter
    );
    let results = await this.CodesListService.searchHotels2(amount);

    console.log(results);

    // Si se ha alcanzado el número máximo de intentos, se devuelve el resultado actual
    if (counter >= 500) {
      console.log(
        "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<SE CUMPLE CONDICIÓN Y TERMINA PROCESO. >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
      );

      return results;
    }

    // Se incrementa el contador y se llama recursivamente a la función
    return this.SearchHotels(request, { counter: counter + 1 });
  }

  ///////////////// paso 3 mapeo de markcorps agrega en tabla search_pr los datos 

  @Post("/MapingMarkcorps")
@Public()
public async MapingMarkcorps(
  @Body()  procestype: proces3type,
  @Query() query: { counter?: number }
): Promise<any> {
  const counter = query?.counter || 1;

  console.log("<<<<<<<<<<<<<<<< INICIO ACTIVIDAD >>>>>>>>>>>>>>>>>>>>>");
  let resultsearch = true;
  let infoSearch = [];

  let batchSize = 5; // Tamaño del lote
let currentIndex = 0; 

  console.log("Datos de la solicitud:",  procestype.typesearch, procestype.textsearch, procestype.quantity);

  if (procestype.typesearch === 1) {
    // Select a tabla Search_pr por texto enviado
    infoSearch = await this.CodesListService.searchtextsearchtablePR( procestype );
  } else if (procestype.typesearch === 2) {
    // Select a tabla ordenado asc con límite de 500 en cada recursividad 
    infoSearch = await this.CodesListService.searchTAKEblePR( procestype );

  }

  console.log('array devuelto de búsqueda:')
  console.log(infoSearch.length)

    // información de select a tabla search_pr se envia a procesadata de markcorps
    // for (const dataiterable of infoSearch) {

    //         let resultvalid = await this.CodesListService.validprocesmarkcorpsID(dataiterable)   

    //         // console.log('validación <<<<<<<<<<<<<<<<<<<<<<<<<')
    //         // console.log(resultvalid)
    //       if(resultvalid){
              
    //               let mapingdata = await   this.CodesListService.procesarDatos(dataiterable);

    //               console.log('se busco hotell', dataiterable.name , 'con id de hotel ', dataiterable.hotelid )

    //       } else {

    //         console.log( ' valor ya se mapeo con markcorps >>>>>>>>>>>>>>>>>>>>>')
          
    //       }
          
        
    //   }

    while (currentIndex < infoSearch.length) {
      // Obtener el lote actual de elementos
      let currentBatch = infoSearch.slice(currentIndex, currentIndex + batchSize);
  
      // Procesar el lote actual
      for (const dataiterable of currentBatch) {
          let resultvalid = await this.CodesListService.validprocesmarkcorpsID(dataiterable);
          if (resultvalid) {
              let mapingdata = await this.CodesListService.procesarDatos2(dataiterable);
              console.log('Se buscó el hotel', dataiterable.name, 'con id de hotel', dataiterable.hotelid);

          } else {
              console.log('El valor ya se mapeó con markcorps');
          }
      }
  
      // Incrementar el índice actual para el siguiente lote
      currentIndex += batchSize;
  }
    // return resultsearch;
  }

}
